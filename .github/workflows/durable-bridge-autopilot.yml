name: Durable Bridge Autopilot

on:
  schedule:
    # Run every 30 minutes
    - cron: '*/30 * * * *'
  workflow_dispatch:
    inputs:
      force_heal:
        description: 'Force auto-heal even if healthy'
        required: false
        default: 'false'
  push:
    paths:
      - 'bridge/**'
      - 'scripts/durable-bridge-health-check.sh'

jobs:
  health-check:
    runs-on: ubuntu-latest
    name: Monitor Bridge Health

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Install dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y jq bc curl
          echo "✅ Dependencies installed"

      - name: Run health check
        id: health_check
        run: |
          chmod +x scripts/durable-bridge-health-check.sh

          # Run health check and capture output
          if ./scripts/durable-bridge-health-check.sh; then
            echo "status=healthy" >> $GITHUB_OUTPUT
            echo "✅ Health check passed"
          else
            echo "status=degraded" >> $GITHUB_OUTPUT
            echo "⚠️ Health check found issues"
          fi
        continue-on-error: true

      - name: Read status file
        id: read_status
        run: |
          if [ -f "logs/durable-bridge-status.json" ]; then
            STATUS=$(jq -r '.status' logs/durable-bridge-status.json)
            ISSUES=$(jq -r '.issues_found' logs/durable-bridge-status.json)
            FIXES=$(jq -r '.fixes_applied' logs/durable-bridge-status.json)
            PROGRAMS=$(jq -r '.programs_count' logs/durable-bridge-status.json)
            FEATURES=$(jq -r '.features_count' logs/durable-bridge-status.json)
            TESTIMONIALS=$(jq -r '.testimonials_count' logs/durable-bridge-status.json)
            RESPONSE_TIME=$(jq -r '.response_time_ms' logs/durable-bridge-status.json)
            
            echo "status=$STATUS" >> $GITHUB_OUTPUT
            echo "issues=$ISSUES" >> $GITHUB_OUTPUT
            echo "fixes=$FIXES" >> $GITHUB_OUTPUT
            echo "programs=$PROGRAMS" >> $GITHUB_OUTPUT
            echo "features=$FEATURES" >> $GITHUB_OUTPUT
            echo "testimonials=$TESTIMONIALS" >> $GITHUB_OUTPUT
            echo "response_time=$RESPONSE_TIME" >> $GITHUB_OUTPUT
          else
            echo "status=unknown" >> $GITHUB_OUTPUT
            echo "issues=0" >> $GITHUB_OUTPUT
            echo "fixes=0" >> $GITHUB_OUTPUT
          fi

      - name: Create health report
        run: |
          echo "## 🏥 Durable Bridge Health Report" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Status:** ${{ steps.read_status.outputs.status }}" >> $GITHUB_STEP_SUMMARY
          echo "**Timestamp:** $(date -u +"%Y-%m-%d %H:%M:%S UTC")" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY

          if [ "${{ steps.read_status.outputs.status }}" = "healthy" ]; then
            echo "✅ **All systems operational**" >> $GITHUB_STEP_SUMMARY
          else
            echo "⚠️ **Issues detected and auto-healed**" >> $GITHUB_STEP_SUMMARY
          fi

          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### 📊 Metrics" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "| Metric | Value |" >> $GITHUB_STEP_SUMMARY
          echo "|--------|-------|" >> $GITHUB_STEP_SUMMARY
          echo "| Issues Found | ${{ steps.read_status.outputs.issues }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Fixes Applied | ${{ steps.read_status.outputs.fixes }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Programs | ${{ steps.read_status.outputs.programs }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Features | ${{ steps.read_status.outputs.features }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Testimonials | ${{ steps.read_status.outputs.testimonials }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Response Time | ${{ steps.read_status.outputs.response_time }}ms |" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### 🔗 URLs" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "- [Bridge Script](https://elevateforhumanityfix2.netlify.app/efh-bridge.js)" >> $GITHUB_STEP_SUMMARY
          echo "- [Configuration](https://elevateforhumanityfix2.netlify.app/api/efh-config.json)" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY

      - name: Upload health logs
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: health-logs-${{ github.run_number }}
          path: |
            logs/durable-bridge-health.log
            logs/durable-bridge-status.json
          retention-days: 30

      - name: Create issue if degraded
        if: steps.read_status.outputs.status == 'degraded' && steps.read_status.outputs.fixes == '0'
        uses: actions/github-script@v7
        with:
          script: |
            const issue = await github.rest.issues.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              title: '🚨 Durable Bridge Health Check Failed',
              body: `## Durable Bridge Health Alert
              
              The automated health check detected issues that could not be auto-healed.
              
              **Status:** Degraded
              **Issues Found:** ${{ steps.read_status.outputs.issues }}
              **Fixes Applied:** ${{ steps.read_status.outputs.fixes }}
              
              ### Action Required
              
              Please review the health check logs and manually investigate:
              
              1. Check bridge script: https://elevateforhumanityfix2.netlify.app/efh-bridge.js
              2. Check configuration: https://elevateforhumanityfix2.netlify.app/api/efh-config.json
              3. Review logs in workflow artifacts
              
              ### Workflow Run
              
              [View Details](https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }})
              
              ---
              
              *This issue was automatically created by the Durable Bridge Autopilot.*`,
              labels: ['autopilot', 'durable-bridge', 'health-check']
            });

            console.log('Created issue:', issue.data.number);

  auto-heal:
    runs-on: ubuntu-latest
    name: Auto-Heal if Needed
    needs: health-check
    if: needs.health-check.result == 'failure' || github.event.inputs.force_heal == 'true'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Setup pnpm
        uses: pnpm/action-setup@v3
        with:
          version: 9

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Rebuild and redeploy
        run: |
          echo "🔧 Rebuilding bridge..."

          # Copy bridge files
          mkdir -p public/api
          cp -f bridge/public/efh-bridge.js public/
          cp -f bridge/api/efh-config.json public/api/

          # Build project
          pnpm build

          echo "✅ Rebuild complete"

      - name: Deploy to Netlify
        uses: nwtgck/actions-netlify@v3.0
        with:
          publish-dir: './dist'
          production-deploy: true
          github-token: ${{ secrets.GITHUB_TOKEN }}
          deploy-message: 'Auto-heal: Durable bridge recovery - ${{ github.run_id }}'
          enable-pull-request-comment: false
          enable-commit-comment: true
        env:
          NETLIFY_AUTH_TOKEN: ${{ secrets.NETLIFY_AUTH_TOKEN }}
          NETLIFY_SITE_ID: ${{ secrets.NETLIFY_SITE_ID }}

      - name: Verify recovery
        run: |
          echo "⏳ Waiting for deployment to propagate..."
          sleep 15

          echo "🔍 Verifying bridge recovery..."

          if curl -sf https://elevateforhumanityfix2.netlify.app/efh-bridge.js > /dev/null; then
            echo "✅ Bridge script is accessible"
          else
            echo "❌ Bridge script still not accessible"
            exit 1
          fi

          if curl -sf https://elevateforhumanityfix2.netlify.app/api/efh-config.json > /dev/null; then
            echo "✅ Configuration is accessible"
          else
            echo "❌ Configuration still not accessible"
            exit 1
          fi

          echo "✅ Recovery successful!"

      - name: Create recovery summary
        run: |
          echo "## 🔧 Auto-Heal Recovery Report" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "✅ **Bridge successfully recovered**" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Actions Taken" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "1. ✅ Rebuilt bridge files" >> $GITHUB_STEP_SUMMARY
          echo "2. ✅ Redeployed to Netlify" >> $GITHUB_STEP_SUMMARY
          echo "3. ✅ Verified accessibility" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Verification" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "- [Bridge Script](https://elevateforhumanityfix2.netlify.app/efh-bridge.js) ✅" >> $GITHUB_STEP_SUMMARY
          echo "- [Configuration](https://elevateforhumanityfix2.netlify.app/api/efh-config.json) ✅" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
