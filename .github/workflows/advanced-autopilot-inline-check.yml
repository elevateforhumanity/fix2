name: Advanced Autopilot - Inline Check

on:
  push:
    branches:
      - main
      - develop
  pull_request:
    branches:
      - main
  schedule:
    # Run every hour
    - cron: '0 * * * *'
  workflow_dispatch:
    inputs:
      check_type:
        description: 'Type of check to run'
        required: false
        default: 'full'
        type: choice
        options:
          - full
          - quick
          - durable-only
          - build-only

jobs:
  inline-health-check:
    runs-on: ubuntu-latest
    name: Inline System Health Check

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Setup pnpm
        uses: pnpm/action-setup@v3
        with:
          version: 9

      - name: Install system dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y jq bc curl
          echo "✅ System dependencies installed"

      - name: Install project dependencies
        run: |
          pnpm install --frozen-lockfile
          echo "✅ Project dependencies installed"

      - name: Run TypeScript check
        id: typecheck
        run: |
          echo "🔍 Running TypeScript check..."
          if pnpm typecheck 2>&1 | tee typecheck.log; then
            echo "status=passed" >> $GITHUB_OUTPUT
            echo "✅ TypeScript check passed"
          else
            echo "status=failed" >> $GITHUB_OUTPUT
            echo "❌ TypeScript check failed"
            exit 1
          fi
        continue-on-error: true

      - name: Run ESLint check
        id: eslint
        run: |
          echo "🔍 Running ESLint check..."
          if pnpm lint 2>&1 | tee eslint.log; then
            echo "status=passed" >> $GITHUB_OUTPUT
            echo "✅ ESLint check passed"
          else
            echo "status=failed" >> $GITHUB_OUTPUT
            echo "❌ ESLint check failed"
            exit 1
          fi
        continue-on-error: true

      - name: Run build test
        id: build
        run: |
          echo "🔍 Running build test..."
          if pnpm build 2>&1 | tee build.log; then
            echo "status=passed" >> $GITHUB_OUTPUT
            echo "✅ Build successful"
          else
            echo "status=failed" >> $GITHUB_OUTPUT
            echo "❌ Build failed"
            exit 1
          fi
        continue-on-error: true

      - name: Run Durable bridge health check
        id: durable_health
        run: |
          echo "🔍 Running Durable bridge health check..."
          chmod +x scripts/durable-bridge-health-check.sh
          if ./scripts/durable-bridge-health-check.sh 2>&1 | tee durable-health.log; then
            echo "status=passed" >> $GITHUB_OUTPUT
            echo "✅ Durable bridge healthy"
          else
            echo "status=failed" >> $GITHUB_OUTPUT
            echo "❌ Durable bridge issues detected"
          fi
        continue-on-error: true

      - name: Run Durable bridge tests
        id: durable_tests
        run: |
          echo "🔍 Running Durable bridge tests..."
          chmod +x scripts/test-durable-bridge.sh
          if ./scripts/test-durable-bridge.sh 2>&1 | tee durable-tests.log; then
            echo "status=passed" >> $GITHUB_OUTPUT
            echo "✅ Durable bridge tests passed"
          else
            echo "status=failed" >> $GITHUB_OUTPUT
            echo "❌ Durable bridge tests failed"
          fi
        continue-on-error: true

      - name: Check environment variables
        id: env_check
        run: |
          echo "🔍 Checking environment variables..."
          MISSING_VARS=()

          # Check critical env vars
          [ -z "$VITE_SUPABASE_URL" ] && MISSING_VARS+=("VITE_SUPABASE_URL")
          [ -z "$VITE_SUPABASE_ANON_KEY" ] && MISSING_VARS+=("VITE_SUPABASE_ANON_KEY")

          if [ ${#MISSING_VARS[@]} -eq 0 ]; then
            echo "status=passed" >> $GITHUB_OUTPUT
            echo "✅ All required environment variables present"
          else
            echo "status=failed" >> $GITHUB_OUTPUT
            echo "❌ Missing environment variables: ${MISSING_VARS[*]}"
          fi
        env:
          VITE_SUPABASE_URL: ${{ secrets.VITE_SUPABASE_URL }}
          VITE_SUPABASE_ANON_KEY: ${{ secrets.VITE_SUPABASE_ANON_KEY }}
        continue-on-error: true

      - name: Check file integrity
        id: file_check
        run: |
          echo "🔍 Checking critical files..."
          MISSING_FILES=()

          # Check critical files exist
          [ ! -f "bridge/public/efh-bridge.js" ] && MISSING_FILES+=("bridge/public/efh-bridge.js")
          [ ! -f "bridge/api/efh-config.json" ] && MISSING_FILES+=("bridge/api/efh-config.json")
          [ ! -f "package.json" ] && MISSING_FILES+=("package.json")
          [ ! -f "vite.config.js" ] && MISSING_FILES+=("vite.config.js")

          if [ ${#MISSING_FILES[@]} -eq 0 ]; then
            echo "status=passed" >> $GITHUB_OUTPUT
            echo "✅ All critical files present"
          else
            echo "status=failed" >> $GITHUB_OUTPUT
            echo "❌ Missing files: ${MISSING_FILES[*]}"
          fi
        continue-on-error: true

      - name: Validate JSON files
        id: json_check
        run: |
          echo "🔍 Validating JSON files..."
          INVALID_JSON=()

          # Check JSON files
          if ! jq empty bridge/api/efh-config.json 2>/dev/null; then
            INVALID_JSON+=("bridge/api/efh-config.json")
          fi

          if ! jq empty package.json 2>/dev/null; then
            INVALID_JSON+=("package.json")
          fi

          if [ ${#INVALID_JSON[@]} -eq 0 ]; then
            echo "status=passed" >> $GITHUB_OUTPUT
            echo "✅ All JSON files valid"
          else
            echo "status=failed" >> $GITHUB_OUTPUT
            echo "❌ Invalid JSON files: ${INVALID_JSON[*]}"
          fi
        continue-on-error: true

      - name: Calculate overall status
        id: overall
        run: |
          CHECKS=(
            "${{ steps.typecheck.outputs.status }}"
            "${{ steps.eslint.outputs.status }}"
            "${{ steps.build.outputs.status }}"
            "${{ steps.durable_health.outputs.status }}"
            "${{ steps.durable_tests.outputs.status }}"
            "${{ steps.env_check.outputs.status }}"
            "${{ steps.file_check.outputs.status }}"
            "${{ steps.json_check.outputs.status }}"
          )

          PASSED=0
          FAILED=0

          for status in "${CHECKS[@]}"; do
            if [ "$status" = "passed" ]; then
              PASSED=$((PASSED + 1))
            else
              FAILED=$((FAILED + 1))
            fi
          done

          TOTAL=${#CHECKS[@]}
          SUCCESS_RATE=$(echo "scale=1; $PASSED * 100 / $TOTAL" | bc)

          echo "passed=$PASSED" >> $GITHUB_OUTPUT
          echo "failed=$FAILED" >> $GITHUB_OUTPUT
          echo "total=$TOTAL" >> $GITHUB_OUTPUT
          echo "success_rate=$SUCCESS_RATE" >> $GITHUB_OUTPUT

          if [ $FAILED -eq 0 ]; then
            echo "status=healthy" >> $GITHUB_OUTPUT
          elif [ $FAILED -le 2 ]; then
            echo "status=degraded" >> $GITHUB_OUTPUT
          else
            echo "status=critical" >> $GITHUB_OUTPUT
          fi

      - name: Send results to Durable Object
        id: send_to_durable
        run: |
          echo "📤 Sending check results to Durable Object..."
          
          # Prepare JSON payload
          cat > check-result.json <<EOF
          {
            "timestamp": "$(date -u +"%Y-%m-%dT%H:%M:%SZ")",
            "runId": "${{ github.run_id }}",
            "branch": "${{ github.ref_name }}",
            "commit": "${{ github.sha }}",
            "checks": {
              "typecheck": "${{ steps.typecheck.outputs.status }}",
              "eslint": "${{ steps.eslint.outputs.status }}",
              "build": "${{ steps.build.outputs.status }}",
              "durableHealth": "${{ steps.durable_health.outputs.status }}",
              "durableTests": "${{ steps.durable_tests.outputs.status }}",
              "envCheck": "${{ steps.env_check.outputs.status }}",
              "fileCheck": "${{ steps.file_check.outputs.status }}",
              "jsonCheck": "${{ steps.json_check.outputs.status }}"
            },
            "overall": {
              "status": "${{ steps.overall.outputs.status }}",
              "passed": ${{ steps.overall.outputs.passed }},
              "failed": ${{ steps.overall.outputs.failed }},
              "total": ${{ steps.overall.outputs.total }},
              "successRate": ${{ steps.overall.outputs.success_rate }}
            },
            "autoFixAttempted": ${{ steps.overall.outputs.status == 'degraded' || steps.overall.outputs.status == 'critical' }},
            "alertSent": ${{ steps.overall.outputs.status == 'critical' }},
            "issueCreated": ${{ steps.overall.outputs.status == 'critical' }}
          }
          EOF
          
          # Send to Durable Object
          if [ -n "${{ secrets.AUTOPILOT_TOKEN }}" ]; then
            RESPONSE=$(curl -s -X POST \
              -H "Content-Type: application/json" \
              -H "Authorization: Bearer ${{ secrets.AUTOPILOT_TOKEN }}" \
              -d @check-result.json \
              https://efh-autopilot-metrics.workers.dev/store)
            
            echo "Response: $RESPONSE"
            echo "✅ Results sent to Durable Object"
            echo "durable_stored=true" >> $GITHUB_OUTPUT
          else
            echo "⚠️ AUTOPILOT_TOKEN not configured, skipping Durable Object storage"
            echo "durable_stored=false" >> $GITHUB_OUTPUT
          fi
        continue-on-error: true

      - name: Create inline check summary
        run: |
          echo "## 🏥 Advanced Autopilot - Inline Health Check" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Overall Status:** ${{ steps.overall.outputs.status }}" >> $GITHUB_STEP_SUMMARY
          echo "**Success Rate:** ${{ steps.overall.outputs.success_rate }}%" >> $GITHUB_STEP_SUMMARY
          echo "**Timestamp:** $(date -u +"%Y-%m-%d %H:%M:%S UTC")" >> $GITHUB_STEP_SUMMARY
          echo "**Durable Storage:** ${{ steps.send_to_durable.outputs.durable_stored == 'true' && '✅ Stored' || '⚠️ Not stored' }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY

          echo "### 📊 Check Results" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "| Check | Status |" >> $GITHUB_STEP_SUMMARY
          echo "|-------|--------|" >> $GITHUB_STEP_SUMMARY
          echo "| TypeScript | ${{ steps.typecheck.outputs.status == 'passed' && '✅ Passed' || '❌ Failed' }} |" >> $GITHUB_STEP_SUMMARY
          echo "| ESLint | ${{ steps.eslint.outputs.status == 'passed' && '✅ Passed' || '❌ Failed' }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Build | ${{ steps.build.outputs.status == 'passed' && '✅ Passed' || '❌ Failed' }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Durable Health | ${{ steps.durable_health.outputs.status == 'passed' && '✅ Passed' || '❌ Failed' }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Durable Tests | ${{ steps.durable_tests.outputs.status == 'passed' && '✅ Passed' || '❌ Failed' }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Environment | ${{ steps.env_check.outputs.status == 'passed' && '✅ Passed' || '❌ Failed' }} |" >> $GITHUB_STEP_SUMMARY
          echo "| File Integrity | ${{ steps.file_check.outputs.status == 'passed' && '✅ Passed' || '❌ Failed' }} |" >> $GITHUB_STEP_SUMMARY
          echo "| JSON Validation | ${{ steps.json_check.outputs.status == 'passed' && '✅ Passed' || '❌ Failed' }} |" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY

          echo "### 📈 Statistics" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "- **Passed:** ${{ steps.overall.outputs.passed }}/${{ steps.overall.outputs.total }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Failed:** ${{ steps.overall.outputs.failed }}/${{ steps.overall.outputs.total }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Success Rate:** ${{ steps.overall.outputs.success_rate }}%" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY

      - name: Upload check logs
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: inline-check-logs-${{ github.run_number }}
          path: |
            typecheck.log
            eslint.log
            build.log
            durable-health.log
            durable-tests.log
            logs/
          retention-days: 30

      - name: Auto-fix if possible
        if: steps.overall.outputs.status == 'degraded' || steps.overall.outputs.status == 'critical'
        run: |
          echo "🔧 Attempting auto-fix..."

          # Fix TypeScript issues
          if [ "${{ steps.typecheck.outputs.status }}" = "failed" ]; then
            echo "Attempting TypeScript auto-fix..."
            # TypeScript issues usually need manual fix
            echo "⚠️ TypeScript issues require manual review"
          fi

          # Fix ESLint issues
          if [ "${{ steps.eslint.outputs.status }}" = "failed" ]; then
            echo "Attempting ESLint auto-fix..."
            pnpm lint --fix || true
          fi

          # Fix Durable bridge
          if [ "${{ steps.durable_health.outputs.status }}" = "failed" ]; then
            echo "Attempting Durable bridge fix..."
            chmod +x scripts/deploy-durable-bridge.sh
            ./scripts/deploy-durable-bridge.sh || true
          fi

          echo "✅ Auto-fix attempts complete"

      - name: Send Zapier alert if critical
        if: steps.overall.outputs.status == 'critical'
        run: |
          if [ -n "${{ secrets.ZAPIER_WEBHOOK_URL }}" ]; then
            echo "📤 Sending critical alert to Zapier..."
            
            export ZAPIER_WEBHOOK_URL="${{ secrets.ZAPIER_WEBHOOK_URL }}"
            chmod +x scripts/zapier-alert.sh
            
            ./scripts/zapier-alert.sh "inline_check_critical" \
              "Advanced autopilot inline check failed: ${{ steps.overall.outputs.failed }}/${{ steps.overall.outputs.total }} checks failed" \
              "critical"
          else
            echo "⚠️ ZAPIER_WEBHOOK_URL not configured, skipping alert"
          fi

      - name: Create issue if critical
        if: steps.overall.outputs.status == 'critical'
        uses: actions/github-script@v7
        with:
          script: |
            const issue = await github.rest.issues.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              title: '🚨 Advanced Autopilot: Critical System Issues Detected',
              body: `## Critical System Health Alert
              
              The advanced autopilot inline check detected critical issues.
              
              **Overall Status:** ${{ steps.overall.outputs.status }}
              **Success Rate:** ${{ steps.overall.outputs.success_rate }}%
              **Failed Checks:** ${{ steps.overall.outputs.failed }}/${{ steps.overall.outputs.total }}
              
              ### Failed Checks
              
              ${[
                '${{ steps.typecheck.outputs.status }}' !== 'passed' ? '- ❌ TypeScript check failed' : '',
                '${{ steps.eslint.outputs.status }}' !== 'passed' ? '- ❌ ESLint check failed' : '',
                '${{ steps.build.outputs.status }}' !== 'passed' ? '- ❌ Build failed' : '',
                '${{ steps.durable_health.outputs.status }}' !== 'passed' ? '- ❌ Durable health check failed' : '',
                '${{ steps.durable_tests.outputs.status }}' !== 'passed' ? '- ❌ Durable tests failed' : '',
                '${{ steps.env_check.outputs.status }}' !== 'passed' ? '- ❌ Environment check failed' : '',
                '${{ steps.file_check.outputs.status }}' !== 'passed' ? '- ❌ File integrity check failed' : '',
                '${{ steps.json_check.outputs.status }}' !== 'passed' ? '- ❌ JSON validation failed' : ''
              ].filter(Boolean).join('\n')}
              
              ### Action Required
              
              1. Review the workflow logs: [View Run](https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }})
              2. Check the uploaded artifacts for detailed logs
              3. Fix the failing checks
              4. Re-run the workflow to verify fixes
              
              ### Quick Links
              
              - [GitHub Actions](https://github.com/${{ github.repository }}/actions)
              - [Netlify Dashboard](https://app.netlify.com/sites/elevateforhumanityfix2)
              - [Bridge Script](https://elevateforhumanityfix2.netlify.app/efh-bridge.js)
              
              ---
              
              *This issue was automatically created by the Advanced Autopilot Inline Check.*`,
              labels: ['autopilot', 'critical', 'inline-check', 'auto-created']
            });

            console.log('Created issue:', issue.data.number);

      - name: Fail workflow if critical
        if: steps.overall.outputs.status == 'critical'
        run: |
          echo "❌ Workflow failed due to critical issues"
          exit 1
