name: AI Agent Claude (Anthropic)

on:
  pull_request:
    types: [opened, synchronize, reopened]
  workflow_dispatch:

jobs:
  claude-security-expert:
    runs-on: ubuntu-latest
    name: Claude Security Expert

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Install jq
        run: sudo apt-get update && sudo apt-get install -y jq

      - name: Claude Security Analysis
        id: claude_security
        env:
          ANTHROPIC_API_KEY: ${{ secrets.ANTHROPIC_API_KEY }}
        run: |
          echo "🔒 Running Deep Security Analysis with Claude..."

          # Get changed files and diff
          if [ "${{ github.event_name }}" = "pull_request" ]; then
            CHANGED_FILES=$(git diff --name-only origin/${{ github.base_ref }}...HEAD)
            DIFF=$(git diff origin/${{ github.base_ref }}...HEAD)
          else
            CHANGED_FILES=$(git diff --name-only HEAD~1 HEAD)
            DIFF=$(git diff HEAD~1 HEAD)
          fi

          # Filter for code files
          CODE_FILES=$(echo "$CHANGED_FILES" | grep -E '\.(ts|tsx|js|jsx|py|go|java|sh|yml|yaml|json|sql)$' || true)

          if [ -z "$CODE_FILES" ]; then
            echo "✅ No code files to analyze"
            exit 0
          fi

          echo "Files to analyze:"
          echo "$CODE_FILES"

          # Check if Anthropic key is available
          if [ -z "$ANTHROPIC_API_KEY" ]; then
            echo "⚠️  ANTHROPIC_API_KEY not set"
            echo "Please add it to GitHub secrets"
            exit 1
          fi

          # Prepare diff (limit to 8000 chars - Claude has larger context)
          DIFF_TRUNCATED=$(echo "$DIFF" | head -c 8000)

          if [ ${#DIFF} -gt 8000 ]; then
            echo "⚠️  Diff truncated from ${#DIFF} to 8000 characters"
          fi

          # Escape for JSON
          DIFF_ESCAPED=$(echo "$DIFF_TRUNCATED" | jq -Rs .)

          # Create Claude request
          cat > claude-request.json << EOF
          {
            "model": "claude-3-5-sonnet-20241022",
            "max_tokens": 2048,
            "messages": [
              {
                "role": "user",
                "content": "You are Claude, an expert security analyst. Perform a comprehensive security audit of these code changes.\n\nFocus on:\n1. **Authentication & Authorization**: Check for broken access control, insecure authentication\n2. **Injection Attacks**: SQL injection, XSS, command injection, LDAP injection\n3. **Sensitive Data**: Exposed secrets, API keys, passwords, PII handling\n4. **Cryptography**: Weak algorithms, improper key management, insecure random numbers\n5. **Security Misconfiguration**: Default credentials, unnecessary features, verbose errors\n6. **Vulnerable Dependencies**: Known CVEs, outdated packages\n7. **CSRF & SSRF**: Cross-site request forgery, server-side request forgery\n8. **Business Logic**: Race conditions, privilege escalation, data validation\n\nProvide:\n- **Critical Issues** (must fix immediately)\n- **High Priority** (fix before merge)\n- **Medium Priority** (fix soon)\n- **Low Priority** (consider fixing)\n- **Best Practices** (good things observed)\n\nBe specific with line numbers and code examples. Use markdown formatting.\n\nCode changes:\n$DIFF_ESCAPED"
              }
            ],
            "temperature": 0.2
          }
          EOF

          # Call Anthropic API
          echo "📡 Sending code to Claude for deep security analysis..."
          HTTP_CODE=$(curl -s -w "%{http_code}" -o claude-response.json \
            https://api.anthropic.com/v1/messages \
            -H "Content-Type: application/json" \
            -H "x-api-key: $ANTHROPIC_API_KEY" \
            -H "anthropic-version: 2023-06-01" \
            -d @claude-request.json)

          echo "HTTP Response Code: $HTTP_CODE"

          if [ "$HTTP_CODE" != "200" ]; then
            echo "⚠️  Anthropic API error (HTTP $HTTP_CODE)"
            echo "Response:"
            cat claude-response.json | jq .
            exit 1
          fi

          # Extract analysis from Claude
          SECURITY_ANALYSIS=$(cat claude-response.json | jq -r '.content[0].text')

          if [ -z "$SECURITY_ANALYSIS" ] || [ "$SECURITY_ANALYSIS" = "null" ]; then
            echo "⚠️  Failed to extract security analysis"
            cat claude-response.json | jq .
            exit 1
          fi

          # Create security report
          cat > claude-security-report.md << EOF
          # 🔒 Deep Security Analysis by Claude (Anthropic)

          ## Files Analyzed
          EOF

          echo "$CODE_FILES" | while read file; do
            if [ -n "$file" ]; then
              echo "- \`$file\`" >> claude-security-report.md
            fi
          done

          cat >> claude-security-report.md << EOF

          ## Claude's Security Assessment

          $SECURITY_ANALYSIS

          ---
          *Powered by Anthropic Claude 3.5 Sonnet*
          *Model: claude-3-5-sonnet-20241022 | Temperature: 0.2 (maximum precision)*
          *Specialized in: Security vulnerability detection & threat analysis*
          EOF

          cat claude-security-report.md
          echo "security_complete=true" >> $GITHUB_OUTPUT
          echo "✅ Claude security analysis completed"

      - name: Comment Security Report on PR
        if: github.event_name == 'pull_request' && steps.claude_security.outputs.security_complete == 'true'
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            const report = fs.readFileSync('claude-security-report.md', 'utf8');

            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: report
            });

      - name: Send to Durable Objects
        if: always()
        env:
          AUTOPILOT_TOKEN: ${{ secrets.AUTOPILOT_TOKEN }}
        run: |
          echo "📤 Sending Claude results to Durable Objects..."

          cat > claude-results.json <<EOF
          {
            "timestamp": "$(date -u +"%Y-%m-%dT%H:%M:%SZ")",
            "runId": "${{ github.run_id }}",
            "branch": "${{ github.ref_name }}",
            "commit": "${{ github.sha }}",
            "event": "${{ github.event_name }}",
            "agent": "claude",
            "model": "claude-3-5-sonnet-20241022",
            "result": "${{ steps.claude_security.outputs.security_complete }}"
          }
          EOF

          if [ -n "$AUTOPILOT_TOKEN" ]; then
            curl -s -X POST \
              -H "Content-Type: application/json" \
              -H "Authorization: Bearer $AUTOPILOT_TOKEN" \
              -d @claude-results.json \
              https://efh-autopilot-metrics.workers.dev/store-ai-results || echo "⚠️  Durable Object not yet deployed"
          fi

          echo "✅ Results processed"

  claude-code-analyst:
    runs-on: ubuntu-latest
    name: Claude Code Quality Analyst

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Install jq
        run: sudo apt-get update && sudo apt-get install -y jq

      - name: Claude Code Analysis
        id: claude_code
        env:
          ANTHROPIC_API_KEY: ${{ secrets.ANTHROPIC_API_KEY }}
        run: |
          echo "🤖 Running Code Quality Analysis with Claude..."

          # Get changed files and diff
          if [ "${{ github.event_name }}" = "pull_request" ]; then
            CHANGED_FILES=$(git diff --name-only origin/${{ github.base_ref }}...HEAD)
            DIFF=$(git diff origin/${{ github.base_ref }}...HEAD)
          else
            CHANGED_FILES=$(git diff --name-only HEAD~1 HEAD)
            DIFF=$(git diff HEAD~1 HEAD)
          fi

          # Filter for code files
          CODE_FILES=$(echo "$CHANGED_FILES" | grep -E '\.(ts|tsx|js|jsx|py|go|java)$' || true)

          if [ -z "$CODE_FILES" ]; then
            echo "✅ No code files to analyze"
            exit 0
          fi

          # Check Anthropic key
          if [ -z "$ANTHROPIC_API_KEY" ]; then
            echo "⚠️  ANTHROPIC_API_KEY not set"
            exit 1
          fi

          # Prepare diff
          DIFF_TRUNCATED=$(echo "$DIFF" | head -c 8000)
          DIFF_ESCAPED=$(echo "$DIFF_TRUNCATED" | jq -Rs .)

          # Create Claude request
          cat > claude-code-request.json << EOF
          {
            "model": "claude-3-5-sonnet-20241022",
            "max_tokens": 2048,
            "messages": [
              {
                "role": "user",
                "content": "You are Claude, an expert software architect and code reviewer. Analyze these code changes for quality, maintainability, and best practices.\n\nFocus on:\n1. **Architecture**: Design patterns, SOLID principles, separation of concerns\n2. **Code Quality**: Readability, maintainability, complexity\n3. **TypeScript/React**: Type safety, hooks usage, component design\n4. **Error Handling**: Try-catch blocks, error boundaries, validation\n5. **Testing**: Testability, edge cases, test coverage\n6. **Documentation**: Comments, JSDoc, README updates\n7. **Performance**: Algorithms, data structures, optimization opportunities\n8. **Refactoring**: Code smells, duplication, improvement suggestions\n\nProvide:\n- **Excellent Practices** (what's done well)\n- **Suggestions** (improvements to consider)\n- **Concerns** (potential issues)\n- **Refactoring Ideas** (how to improve structure)\n\nBe constructive and specific. Use markdown formatting.\n\nCode changes:\n$DIFF_ESCAPED"
              }
            ],
            "temperature": 0.3
          }
          EOF

          # Call Anthropic API
          echo "📡 Sending code to Claude for quality analysis..."
          HTTP_CODE=$(curl -s -w "%{http_code}" -o claude-code-response.json \
            https://api.anthropic.com/v1/messages \
            -H "Content-Type: application/json" \
            -H "x-api-key: $ANTHROPIC_API_KEY" \
            -H "anthropic-version: 2023-06-01" \
            -d @claude-code-request.json)

          if [ "$HTTP_CODE" != "200" ]; then
            echo "⚠️  Anthropic API error (HTTP $HTTP_CODE)"
            cat claude-code-response.json | jq .
            exit 1
          fi

          # Extract analysis
          CODE_ANALYSIS=$(cat claude-code-response.json | jq -r '.content[0].text')

          # Create report
          cat > claude-code-report.md << EOF
          # 🤖 Code Quality Analysis by Claude (Anthropic)

          ## Files Analyzed
          EOF

          echo "$CODE_FILES" | while read file; do
            if [ -n "$file" ]; then
              echo "- \`$file\`" >> claude-code-report.md
            fi
          done

          cat >> claude-code-report.md << EOF

          ## Claude's Code Quality Assessment

          $CODE_ANALYSIS

          ---
          *Powered by Anthropic Claude 3.5 Sonnet*
          *Model: claude-3-5-sonnet-20241022 | Optimized for code quality analysis*
          *Specialized in: Architecture, best practices, and maintainability*
          EOF

          cat claude-code-report.md
          echo "code_complete=true" >> $GITHUB_OUTPUT
          echo "✅ Claude code analysis completed"

      - name: Comment Code Report on PR
        if: github.event_name == 'pull_request' && steps.claude_code.outputs.code_complete == 'true'
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            const report = fs.readFileSync('claude-code-report.md', 'utf8');

            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: report
            });
