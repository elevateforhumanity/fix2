name: Autopilot Phase 2 - Migrations with Rollback

on:
  push:
    branches: [main]
    paths:
      - 'supabase/migrations/**'
  workflow_dispatch:
    inputs:
      force_migration:
        description: 'Force migration even if no changes detected'
        required: false
        default: 'false'
      rollback_only:
        description: 'Only perform rollback (restore from last backup)'
        required: false
        default: 'false'

env:
  SUPABASE_DB_URL: ${{ secrets.SUPABASE_DB_URL }}
  SUPABASE_PROJECT_REF: ${{ secrets.SUPABASE_PROJECT_REF }}
  SUPABASE_SERVICE_ROLE_KEY: ${{ secrets.SUPABASE_SERVICE_ROLE_KEY }}
  NETLIFY_BUILD_HOOK: ${{ secrets.NETLIFY_BUILD_HOOK }}
  SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
  AUTOPILOT_SECRET: ${{ secrets.AUTOPILOT_SECRET }}
  SUPABASE_HEALTH_LOGGER_URL: ${{ secrets.SUPABASE_HEALTH_LOGGER_URL }}

jobs:
  # Job 1: Rollback only (manual trigger)
  rollback:
    runs-on: ubuntu-latest
    if: github.event.inputs.rollback_only == 'true'
    steps:
      - uses: actions/checkout@v4

      - name: Install PostgreSQL client
        run: |
          sudo apt-get update
          sudo apt-get install -y postgresql-client

      - name: Download latest backup artifact
        uses: actions/download-artifact@v4
        with:
          pattern: backup-*
          path: supabase/backups/
          merge-multiple: true
        continue-on-error: true

      - name: Execute rollback
        id: rollback
        run: |
          bash scripts/autopilot_rollback.sh "$SUPABASE_DB_URL"

      - name: Slack notify rollback
        if: always() && env.SLACK_WEBHOOK_URL != ''
        run: |
          STATUS="${{ steps.rollback.outcome }}"
          if [[ "$STATUS" == "success" ]]; then
            EMOJI="‚úÖ"
            MESSAGE="Database rollback completed successfully"
          else
            EMOJI="‚ùå"
            MESSAGE="Database rollback FAILED - manual intervention required"
          fi

          curl -X POST -H 'Content-type: application/json' \
            --data "{\"text\":\"$EMOJI *Autopilot Rollback $STATUS* ‚Äî $MESSAGE for commit <${{ github.server_url }}/${{ github.repository }}/commit/${{ github.sha }}>\"}" \
            "$SLACK_WEBHOOK_URL"

  # Job 2: Backup, Migrate, and Deploy (with automatic rollback on failure)
  migrate:
    runs-on: ubuntu-latest
    if: github.event.inputs.rollback_only != 'true'
    outputs:
      migration_status: ${{ steps.migrate.outcome }}
      backup_file: ${{ steps.backup.outputs.BACKUP_FILE }}
    steps:
      - uses: actions/checkout@v4

      - name: Install PostgreSQL client
        run: |
          sudo apt-get update
          sudo apt-get install -y postgresql-client

      - name: Slack notify start
        if: env.SLACK_WEBHOOK_URL != ''
        run: |
          curl -X POST -H 'Content-type: application/json' \
            --data "{\"text\":\"üöÄ *Autopilot Starting* ‚Äî Creating backup and applying migrations for commit <${{ github.server_url }}/${{ github.repository }}/commit/${{ github.sha }}>\"}" \
            "$SLACK_WEBHOOK_URL"

      - name: Create pre-migration backup
        id: backup
        run: |
          echo "==> Creating database backup before migration..."
          bash scripts/autopilot_backup.sh "$SUPABASE_DB_URL"

      - name: Upload backup artifact
        uses: actions/upload-artifact@v4
        with:
          name: backup-${{ steps.backup.outputs.BACKUP_TIMESTAMP }}
          path: supabase/backups/backup_*.sql.gz
          retention-days: 30

      - name: Concatenate migrations
        run: |
          echo "==> Building ALL_IN_ONE migration file..."
          cat supabase/migrations/*.sql > supabase/migrations/ALL_IN_ONE__paste.sql
          echo "‚úÖ Created ALL_IN_ONE__paste.sql ($(wc -l < supabase/migrations/ALL_IN_ONE__paste.sql) lines)"

      - name: Apply migrations (transactional)
        id: migrate
        continue-on-error: true
        run: |
          echo "==> Applying migrations to database..."
          START_TIME=$(date +%s)

          # Apply migrations in a transaction
          psql "$SUPABASE_DB_URL" <<SQL
          BEGIN;

          -- Record migration start
          INSERT INTO automation.migration_log (commit_sha, status, notes, backup_file, triggered_by)
          VALUES ('${{ github.sha }}', 'pending', 'Migration started', '${{ steps.backup.outputs.BACKUP_FILE }}', 'github_actions');

          -- Apply migrations from file
          \i supabase/migrations/ALL_IN_ONE__paste.sql

          COMMIT;
          SQL

          END_TIME=$(date +%s)
          DURATION=$((END_TIME - START_TIME))

          # Update migration log with success
          psql "$SUPABASE_DB_URL" <<SQL
          UPDATE automation.migration_log
          SET status = 'success',
              duration_ms = ${DURATION}000,
              notes = 'Migration completed successfully',
              updated_at = NOW()
          WHERE commit_sha = '${{ github.sha }}'
          ORDER BY ran_at DESC
          LIMIT 1;
          SQL

          echo "‚úÖ Migrations applied successfully in ${DURATION}s"

      - name: Rollback on failure
        if: steps.migrate.outcome == 'failure'
        id: auto_rollback
        run: |
          echo "‚ö†Ô∏è  Migration failed ‚Äî initiating automatic rollback..."

          # Record failure in log
          psql "$SUPABASE_DB_URL" <<SQL || true
          UPDATE automation.migration_log
          SET status = 'failure',
              error_message = 'Migration failed, rollback initiated',
              updated_at = NOW()
          WHERE commit_sha = '${{ github.sha }}'
          ORDER BY ran_at DESC
          LIMIT 1;
          SQL

          # Execute rollback
          bash scripts/autopilot_rollback.sh "$SUPABASE_DB_URL" "${{ steps.backup.outputs.BACKUP_FILE }}"

      - name: Log migration success
        if: steps.migrate.outcome == 'success' && env.SUPABASE_HEALTH_LOGGER_URL != ''
        run: |
          curl -s -X POST "$SUPABASE_HEALTH_LOGGER_URL" \
            -H "x-autopilot-sign: $AUTOPILOT_SECRET" \
            -H "Content-Type: application/json" \
            -d '{"source":"autopilot","kind":"migration","status":"ok","detail":"Migrations applied successfully for commit ${{ github.sha }}"}'

      - name: Slack notify migration success
        if: steps.migrate.outcome == 'success' && env.SLACK_WEBHOOK_URL != ''
        run: |
          curl -X POST -H 'Content-type: application/json' \
            --data "{\"text\":\"‚úÖ *Autopilot Success* ‚Äî Supabase migrations completed successfully for commit <${{ github.server_url }}/${{ github.repository }}/commit/${{ github.sha }}>. Triggering Netlify build...\"}" \
            "$SLACK_WEBHOOK_URL"

      - name: Log migration rollback
        if: steps.migrate.outcome == 'failure' && env.SUPABASE_HEALTH_LOGGER_URL != ''
        run: |
          curl -s -X POST "$SUPABASE_HEALTH_LOGGER_URL" \
            -H "x-autopilot-sign: $AUTOPILOT_SECRET" \
            -H "Content-Type: application/json" \
            -d '{"source":"autopilot","kind":"rollback","status":"warn","detail":"Migration failed, rollback executed for commit ${{ github.sha }}"}'

      - name: Slack notify migration failure with rollback
        if: steps.migrate.outcome == 'failure' && env.SLACK_WEBHOOK_URL != ''
        run: |
          BACKUP_NAME=$(basename "${{ steps.backup.outputs.BACKUP_FILE }}")
          curl -X POST -H 'Content-type: application/json' \
            --data "{\"text\":\"üö® *Autopilot Rollback Executed* ‚Äî Migration failed and database was restored from backup \`$BACKUP_NAME\`.\n\nCommit: <${{ github.server_url }}/${{ github.repository }}/commit/${{ github.sha }}>\nLogs: <${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}>\"}" \
            "$SLACK_WEBHOOK_URL"

      - name: Record migration result
        if: always()
        run: |
          STATUS="${{ steps.migrate.outcome }}"
          NOTES="Migration $STATUS"

          if [[ "$STATUS" == "failure" ]]; then
            NOTES="Migration failed, rollback executed"
          fi

          psql "$SUPABASE_DB_URL" <<SQL || true
          INSERT INTO automation.migration_log (commit_sha, status, notes, triggered_by)
          VALUES ('${{ github.sha }}', '$STATUS', '$NOTES', 'github_actions')
          ON CONFLICT DO NOTHING;
          SQL

      - name: Fail job if migration failed
        if: steps.migrate.outcome == 'failure'
        run: |
          echo "‚ùå Migration failed and rollback was executed"
          exit 1

  # Job 3: Trigger Netlify deployment (only on successful migration)
  deploy:
    runs-on: ubuntu-latest
    needs: migrate
    if: needs.migrate.outputs.migration_status == 'success'
    steps:
      - name: Trigger Netlify build
        id: netlify
        run: |
          echo "==> Triggering Netlify build..."
          RESPONSE=$(curl -X POST "$NETLIFY_BUILD_HOOK" -w "\n%{http_code}")
          HTTP_CODE=$(echo "$RESPONSE" | tail -n1)

          if [[ "$HTTP_CODE" == "200" ]] || [[ "$HTTP_CODE" == "201" ]]; then
            echo "‚úÖ Netlify build triggered successfully"
          else
            echo "‚ö†Ô∏è  Netlify build trigger returned HTTP $HTTP_CODE"
            exit 1
          fi

      - name: Record deployment
        if: always()
        run: |
          STATUS="${{ steps.netlify.outcome }}"
          [[ "$STATUS" == "success" ]] && DB_STATUS="triggered" || DB_STATUS="failed"

          psql "$SUPABASE_DB_URL" <<SQL || true
          INSERT INTO automation.deployment_log (platform, status, notes, migration_log_id)
          VALUES (
            'netlify',
            '$DB_STATUS',
            'Build hook triggered from GitHub Actions',
            (SELECT id FROM automation.migration_log WHERE commit_sha = '${{ github.sha }}' ORDER BY ran_at DESC LIMIT 1)
          );
          SQL
        env:
          SUPABASE_DB_URL: ${{ secrets.SUPABASE_DB_URL }}

      - name: Slack notify deploy
        if: env.SLACK_WEBHOOK_URL != ''
        run: |
          STATUS="${{ steps.netlify.outcome }}"
          if [[ "$STATUS" == "success" ]]; then
            EMOJI="üöÄ"
            MESSAGE="Netlify build triggered successfully"
          else
            EMOJI="‚ö†Ô∏è"
            MESSAGE="Netlify build trigger failed"
          fi

          curl -X POST -H 'Content-type: application/json' \
            --data "{\"text\":\"$EMOJI *Autopilot Deploy* ‚Äî $MESSAGE for commit <${{ github.server_url }}/${{ github.repository }}/commit/${{ github.sha }}>\"}" \
            "$SLACK_WEBHOOK_URL"

  # Job 4: Create GitHub issue on failure
  alert:
    runs-on: ubuntu-latest
    needs: migrate
    if: failure()
    steps:
      - uses: actions/checkout@v4

      - name: Create failure issue
        uses: actions/github-script@v7
        with:
          script: |
            const issue = await github.rest.issues.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              title: `üö® Autopilot Migration Failed - ${context.sha.substring(0, 7)}`,
              body: `## Migration Failure Report
              
              **Commit:** ${context.sha}
              **Branch:** ${context.ref}
              **Triggered by:** @${context.actor}
              **Workflow run:** ${context.serverUrl}/${context.repo.owner}/${context.repo.repo}/actions/runs/${context.runId}
              
              ### What happened
              
              The autopilot migration failed and an automatic rollback was executed. The database has been restored to its previous state.
              
              ### Next steps
              
              1. Review the workflow logs above
              2. Check the migration SQL for syntax errors
              3. Verify database connectivity
              4. Fix the issue and push again
              
              ### Backup information
              
              A backup was created before the migration attempt and is available as a workflow artifact for 30 days.
              
              ---
              *This issue was automatically created by Autopilot Phase 2*`,
              labels: ['autopilot', 'migration-failed', 'urgent']
            });

            console.log(`Created issue #${issue.data.number}`);
