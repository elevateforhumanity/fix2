name: AI Agent GPT-4 (Real AI)

on:
  pull_request:
    types: [opened, synchronize, reopened]
  workflow_dispatch:

jobs:
  gpt4-code-review:
    runs-on: ubuntu-latest
    name: GPT-4 Code Review

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Install jq
        run: sudo apt-get update && sudo apt-get install -y jq

      - name: GPT-4 Code Review
        id: gpt4_review
        env:
          OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
        run: |
          echo "🤖 Running Real AI Code Review with GPT-4..."

          # Get changed files and diff
          if [ "${{ github.event_name }}" = "pull_request" ]; then
            CHANGED_FILES=$(git diff --name-only origin/${{ github.base_ref }}...HEAD)
            DIFF=$(git diff origin/${{ github.base_ref }}...HEAD)
          else
            CHANGED_FILES=$(git diff --name-only HEAD~1 HEAD)
            DIFF=$(git diff HEAD~1 HEAD)
          fi

          echo "Changed files:"
          echo "$CHANGED_FILES"

          # Filter for code files only
          CODE_FILES=$(echo "$CHANGED_FILES" | grep -E '\.(ts|tsx|js|jsx|py|go|java|sh|yml|yaml|json)$' || true)

          if [ -z "$CODE_FILES" ]; then
            echo "✅ No code files changed"
            exit 0
          fi

          echo "Code files to review:"
          echo "$CODE_FILES"

          # Check if OpenAI key is available
          if [ -z "$OPENAI_API_KEY" ]; then
            echo "⚠️  OPENAI_API_KEY not set"
            echo "Please add it to GitHub secrets:"
            echo "gh secret set OPENAI_API_KEY --body 'sk-...'"
            exit 1
          fi

          # Prepare diff for GPT-4 (limit to 6000 chars to avoid token limits)
          DIFF_TRUNCATED=$(echo "$DIFF" | head -c 6000)

          if [ ${#DIFF} -gt 6000 ]; then
            echo "⚠️  Diff truncated from ${#DIFF} to 6000 characters"
          fi

          # Escape special characters for JSON
          DIFF_ESCAPED=$(echo "$DIFF_TRUNCATED" | jq -Rs .)

          # Create JSON payload for OpenAI
          cat > openai-request.json << EOF
          {
            "model": "gpt-4",
            "messages": [
              {
                "role": "system",
                "content": "You are an expert code reviewer for the Elevate For Humanity project. Review code changes and provide constructive feedback. Focus on:\n1. Code quality and best practices\n2. Potential bugs or issues\n3. Security concerns\n4. Performance improvements\n5. Suggestions for better patterns\n6. TypeScript/React best practices\n\nBe concise but thorough. Use markdown formatting."
              },
              {
                "role": "user",
                "content": "Review these code changes:\n\n$DIFF_ESCAPED"
              }
            ],
            "temperature": 0.3,
            "max_tokens": 1500
          }
          EOF

          # Call OpenAI API
          echo "📡 Sending code to GPT-4 for review..."
          HTTP_CODE=$(curl -s -w "%{http_code}" -o openai-response.json \
            https://api.openai.com/v1/chat/completions \
            -H "Content-Type: application/json" \
            -H "Authorization: Bearer $OPENAI_API_KEY" \
            -d @openai-request.json)

          echo "HTTP Response Code: $HTTP_CODE"

          if [ "$HTTP_CODE" != "200" ]; then
            echo "⚠️  OpenAI API error (HTTP $HTTP_CODE)"
            echo "Response:"
            cat openai-response.json | jq .
            exit 1
          fi

          # Extract review from GPT-4 response
          AI_REVIEW=$(cat openai-response.json | jq -r '.choices[0].message.content')

          if [ -z "$AI_REVIEW" ] || [ "$AI_REVIEW" = "null" ]; then
            echo "⚠️  Failed to extract AI review"
            cat openai-response.json | jq .
            exit 1
          fi

          # Create review summary with GPT-4 feedback
          cat > ai-review-summary.md << EOF
          # 🤖 AI Code Review by GPT-4

          ## Files Reviewed
          EOF

          echo "$CODE_FILES" | while read file; do
            if [ -n "$file" ]; then
              echo "- \`$file\`" >> ai-review-summary.md
            fi
          done

          cat >> ai-review-summary.md << EOF

          ## GPT-4 Analysis

          $AI_REVIEW

          ---
          *Powered by OpenAI GPT-4 via AI Agent Autopilot*
          *Model: gpt-4 | Temperature: 0.3 | Max Tokens: 1500*
          EOF

          cat ai-review-summary.md
          echo "review_complete=true" >> $GITHUB_OUTPUT
          echo "✅ Real AI review completed with GPT-4"

      - name: Comment on PR
        if: github.event_name == 'pull_request' && steps.gpt4_review.outputs.review_complete == 'true'
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            const summary = fs.readFileSync('ai-review-summary.md', 'utf8');

            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: summary
            });

      - name: Send to Durable Objects
        if: always()
        env:
          AUTOPILOT_TOKEN: ${{ secrets.AUTOPILOT_TOKEN }}
        run: |
          echo "📤 Sending GPT-4 results to Durable Objects..."

          # Prepare results
          cat > gpt4-results.json <<EOF
          {
            "timestamp": "$(date -u +"%Y-%m-%dT%H:%M:%SZ")",
            "runId": "${{ github.run_id }}",
            "branch": "${{ github.ref_name }}",
            "commit": "${{ github.sha }}",
            "event": "${{ github.event_name }}",
            "agent": "gpt-4",
            "model": "gpt-4",
            "result": "${{ steps.gpt4_review.outputs.review_complete }}"
          }
          EOF

          # Send to Durable Object (if configured)
          if [ -n "$AUTOPILOT_TOKEN" ]; then
            curl -s -X POST \
              -H "Content-Type: application/json" \
              -H "Authorization: Bearer $AUTOPILOT_TOKEN" \
              -d @gpt4-results.json \
              https://efh-autopilot-metrics.workers.dev/store-ai-results || echo "⚠️  Durable Object not yet deployed"
          else
            echo "⚠️  AUTOPILOT_TOKEN not configured"
          fi

          echo "✅ Results processed"

  gpt4-security-scan:
    runs-on: ubuntu-latest
    name: GPT-4 Security Analysis
    if: github.event_name == 'pull_request'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Install jq
        run: sudo apt-get update && sudo apt-get install -y jq

      - name: GPT-4 Security Analysis
        id: gpt4_security
        env:
          OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
        run: |
          echo "🔒 Running AI Security Analysis with GPT-4..."

          # Get changed files
          if [ "${{ github.event_name }}" = "pull_request" ]; then
            CHANGED_FILES=$(git diff --name-only origin/${{ github.base_ref }}...HEAD)
            DIFF=$(git diff origin/${{ github.base_ref }}...HEAD)
          else
            CHANGED_FILES=$(git diff --name-only HEAD~1 HEAD)
            DIFF=$(git diff HEAD~1 HEAD)
          fi

          # Filter for code files
          CODE_FILES=$(echo "$CHANGED_FILES" | grep -E '\.(ts|tsx|js|jsx|py|go|java|sh|yml|yaml)$' || true)

          if [ -z "$CODE_FILES" ]; then
            echo "✅ No code files to scan"
            exit 0
          fi

          # Check OpenAI key
          if [ -z "$OPENAI_API_KEY" ]; then
            echo "⚠️  OPENAI_API_KEY not set"
            exit 1
          fi

          # Prepare diff (limit to 5000 chars)
          DIFF_TRUNCATED=$(echo "$DIFF" | head -c 5000)
          DIFF_ESCAPED=$(echo "$DIFF_TRUNCATED" | jq -Rs .)

          # Create security analysis request
          cat > security-request.json << EOF
          {
            "model": "gpt-4",
            "messages": [
              {
                "role": "system",
                "content": "You are a security expert analyzing code for vulnerabilities. Focus on:\n1. SQL injection risks\n2. XSS vulnerabilities\n3. Authentication/authorization issues\n4. Exposed secrets or API keys\n5. Insecure dependencies\n6. CSRF vulnerabilities\n7. Input validation issues\n8. Cryptography misuse\n\nProvide specific, actionable security recommendations. Use markdown formatting."
              },
              {
                "role": "user",
                "content": "Analyze these code changes for security vulnerabilities:\n\n$DIFF_ESCAPED"
              }
            ],
            "temperature": 0.2,
            "max_tokens": 1500
          }
          EOF

          # Call OpenAI API
          echo "📡 Sending code to GPT-4 for security analysis..."
          HTTP_CODE=$(curl -s -w "%{http_code}" -o security-response.json \
            https://api.openai.com/v1/chat/completions \
            -H "Content-Type: application/json" \
            -H "Authorization: Bearer $OPENAI_API_KEY" \
            -d @security-request.json)

          if [ "$HTTP_CODE" != "200" ]; then
            echo "⚠️  OpenAI API error (HTTP $HTTP_CODE)"
            cat security-response.json | jq .
            exit 1
          fi

          # Extract security analysis
          SECURITY_ANALYSIS=$(cat security-response.json | jq -r '.choices[0].message.content')

          # Create security report
          cat > security-report.md << EOF
          # 🔒 AI Security Analysis by GPT-4

          ## Files Analyzed
          EOF

          echo "$CODE_FILES" | while read file; do
            if [ -n "$file" ]; then
              echo "- \`$file\`" >> security-report.md
            fi
          done

          cat >> security-report.md << EOF

          ## Security Analysis

          $SECURITY_ANALYSIS

          ---
          *Powered by OpenAI GPT-4 Security Analysis*
          *Model: gpt-4 | Temperature: 0.2 (high precision)*
          EOF

          cat security-report.md
          echo "security_complete=true" >> $GITHUB_OUTPUT
          echo "✅ Security analysis completed"

      - name: Comment Security Report on PR
        if: steps.gpt4_security.outputs.security_complete == 'true'
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            const report = fs.readFileSync('security-report.md', 'utf8');

            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: report
            });

  gpt4-performance-analysis:
    runs-on: ubuntu-latest
    name: GPT-4 Performance Analysis
    if: github.event_name == 'pull_request'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Install jq
        run: sudo apt-get update && sudo apt-get install -y jq

      - name: GPT-4 Performance Analysis
        id: gpt4_performance
        env:
          OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
        run: |
          echo "⚡ Running AI Performance Analysis with GPT-4..."

          # Get changed files
          if [ "${{ github.event_name }}" = "pull_request" ]; then
            CHANGED_FILES=$(git diff --name-only origin/${{ github.base_ref }}...HEAD)
            DIFF=$(git diff origin/${{ github.base_ref }}...HEAD)
          else
            CHANGED_FILES=$(git diff --name-only HEAD~1 HEAD)
            DIFF=$(git diff HEAD~1 HEAD)
          fi

          # Filter for code files
          CODE_FILES=$(echo "$CHANGED_FILES" | grep -E '\.(ts|tsx|js|jsx|py|go|java)$' || true)

          if [ -z "$CODE_FILES" ]; then
            echo "✅ No code files to analyze"
            exit 0
          fi

          # Check OpenAI key
          if [ -z "$OPENAI_API_KEY" ]; then
            echo "⚠️  OPENAI_API_KEY not set"
            exit 1
          fi

          # Prepare diff (limit to 5000 chars)
          DIFF_TRUNCATED=$(echo "$DIFF" | head -c 5000)
          DIFF_ESCAPED=$(echo "$DIFF_TRUNCATED" | jq -Rs .)

          # Create performance analysis request
          cat > performance-request.json << EOF
          {
            "model": "gpt-4",
            "messages": [
              {
                "role": "system",
                "content": "You are a performance optimization expert. Analyze code for:\n1. Time complexity issues (O(n²) loops, etc.)\n2. Memory leaks\n3. Unnecessary re-renders (React)\n4. Database query optimization\n5. Bundle size impact\n6. Caching opportunities\n7. Async/await best practices\n8. Resource-intensive operations\n\nProvide specific, actionable performance recommendations. Use markdown formatting."
              },
              {
                "role": "user",
                "content": "Analyze these code changes for performance issues:\n\n$DIFF_ESCAPED"
              }
            ],
            "temperature": 0.3,
            "max_tokens": 1500
          }
          EOF

          # Call OpenAI API
          echo "📡 Sending code to GPT-4 for performance analysis..."
          HTTP_CODE=$(curl -s -w "%{http_code}" -o performance-response.json \
            https://api.openai.com/v1/chat/completions \
            -H "Content-Type: application/json" \
            -H "Authorization: Bearer $OPENAI_API_KEY" \
            -d @performance-request.json)

          if [ "$HTTP_CODE" != "200" ]; then
            echo "⚠️  OpenAI API error (HTTP $HTTP_CODE)"
            cat performance-response.json | jq .
            exit 1
          fi

          # Extract performance analysis
          PERFORMANCE_ANALYSIS=$(cat performance-response.json | jq -r '.choices[0].message.content')

          # Create performance report
          cat > performance-report.md << EOF
          # ⚡ AI Performance Analysis by GPT-4

          ## Files Analyzed
          EOF

          echo "$CODE_FILES" | while read file; do
            if [ -n "$file" ]; then
              echo "- \`$file\`" >> performance-report.md
            fi
          done

          cat >> performance-report.md << EOF

          ## Performance Analysis

          $PERFORMANCE_ANALYSIS

          ---
          *Powered by OpenAI GPT-4 Performance Analysis*
          *Model: gpt-4 | Optimized for performance insights*
          EOF

          cat performance-report.md
          echo "performance_complete=true" >> $GITHUB_OUTPUT
          echo "✅ Performance analysis completed"

      - name: Comment Performance Report on PR
        if: steps.gpt4_performance.outputs.performance_complete == 'true'
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            const report = fs.readFileSync('performance-report.md', 'utf8');

            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: report
            });
