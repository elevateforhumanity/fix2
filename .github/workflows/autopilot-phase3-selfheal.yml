name: Autopilot Phase 3 - Self-Heal Monitor

on:
  schedule:
    - cron: '*/5 * * * *' # Every 5 minutes
  workflow_dispatch:
    inputs:
      force_heal:
        description: 'Force healing actions even if site is healthy'
        required: false
        default: 'false'

env:
  SITE_URL: https://elevateforhumanity.org
  HEALTH_ENDPOINT: https://elevateforhumanity.org/api/health
  SUPABASE_HEALTH_ENDPOINT: https://${{ secrets.SUPABASE_PROJECT_REF }}.supabase.co/functions/v1/autopilot-health-worker
  WORKER_ENDPOINT: ${{ secrets.WORKER_ENDPOINT }}
  NETLIFY_BUILD_HOOK: ${{ secrets.NETLIFY_BUILD_HOOK }}
  AUTOPILOT_SECRET: ${{ secrets.AUTOPILOT_SECRET }}
  SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
  SUPABASE_DB_URL: ${{ secrets.SUPABASE_DB_URL }}
  SUPABASE_HEALTH_LOGGER_URL: ${{ secrets.SUPABASE_HEALTH_LOGGER_URL }}

jobs:
  selfheal:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Install PostgreSQL client
        run: |
          sudo apt-get update
          sudo apt-get install -y postgresql-client

      - name: Check website health
        id: site_check
        run: |
          echo "==> Checking website health..."
          START_TIME=$(date +%s%3N)

          # Check main site
          SITE_STATUS=$(curl -s -o /dev/null -w "%{http_code}" --max-time 10 "$SITE_URL" || echo "000")

          # Check health endpoint
          HEALTH_STATUS=$(curl -s -o /dev/null -w "%{http_code}" --max-time 10 "$HEALTH_ENDPOINT" || echo "000")

          END_TIME=$(date +%s%3N)
          RESPONSE_TIME=$((END_TIME - START_TIME))

          echo "site_status=$SITE_STATUS" >> $GITHUB_OUTPUT
          echo "health_status=$HEALTH_STATUS" >> $GITHUB_OUTPUT
          echo "response_time=$RESPONSE_TIME" >> $GITHUB_OUTPUT

          # Determine if site is healthy
          if [[ "$SITE_STATUS" -ge 500 ]] || [[ "$SITE_STATUS" == "000" ]] || [[ "$HEALTH_STATUS" -ge 500 ]] || [[ "$HEALTH_STATUS" == "000" ]]; then
            echo "site_healthy=false" >> $GITHUB_OUTPUT
            echo "⚠️  Site unhealthy: Site=$SITE_STATUS, Health=$HEALTH_STATUS"
          else
            echo "site_healthy=true" >> $GITHUB_OUTPUT
            echo "✅ Site healthy: Site=$SITE_STATUS, Health=$HEALTH_STATUS (${RESPONSE_TIME}ms)"
          fi

      - name: Check database health
        id: db_check
        run: |
          echo "==> Checking database health..."
          START_TIME=$(date +%s%3N)

          # Check Supabase health worker
          RESPONSE=$(curl -s -X POST "$SUPABASE_HEALTH_ENDPOINT" \
            -H "Content-Type: application/json" \
            -H "x-autopilot-secret: $AUTOPILOT_SECRET" \
            -d '{"task":"full_health_check"}' \
            -w "\n%{http_code}" \
            --max-time 10 || echo -e "\n000")

          HTTP_CODE=$(echo "$RESPONSE" | tail -n1)
          BODY=$(echo "$RESPONSE" | head -n-1)

          END_TIME=$(date +%s%3N)
          DB_RESPONSE_TIME=$((END_TIME - START_TIME))

          echo "db_status=$HTTP_CODE" >> $GITHUB_OUTPUT
          echo "db_response_time=$DB_RESPONSE_TIME" >> $GITHUB_OUTPUT

          if [[ "$HTTP_CODE" == "200" ]]; then
            echo "db_healthy=true" >> $GITHUB_OUTPUT
            echo "✅ Database healthy (${DB_RESPONSE_TIME}ms)"
          else
            echo "db_healthy=false" >> $GITHUB_OUTPUT
            echo "⚠️  Database unhealthy: HTTP $HTTP_CODE"
          fi

      - name: Log health check to database
        if: always()
        run: |
          SITE_HEALTHY="${{ steps.site_check.outputs.site_healthy }}"
          DB_HEALTHY="${{ steps.db_check.outputs.db_healthy }}"

          # Determine overall status
          if [[ "$SITE_HEALTHY" == "true" ]] && [[ "$DB_HEALTHY" == "true" ]]; then
            STATUS="healthy"
          elif [[ "$SITE_HEALTHY" == "false" ]] || [[ "$DB_HEALTHY" == "false" ]]; then
            STATUS="unhealthy"
          else
            STATUS="degraded"
          fi

          # Create JSON with check results
          CHECKS=$(cat <<EOF
          {
            "site_status": "${{ steps.site_check.outputs.site_status }}",
            "health_status": "${{ steps.site_check.outputs.health_status }}",
            "db_status": "${{ steps.db_check.outputs.db_status }}",
            "site_response_time": ${{ steps.site_check.outputs.response_time }},
            "db_response_time": ${{ steps.db_check.outputs.db_response_time }}
          }
          EOF
          )

          # Log to database
          psql "$SUPABASE_DB_URL" <<SQL || true
          INSERT INTO automation.health_log (status, response_time_ms, checks, notes)
          VALUES (
            '$STATUS',
            ${{ steps.site_check.outputs.response_time }},
            '$CHECKS'::jsonb,
            'Automated health check from GitHub Actions'
          );
          SQL

          echo "✅ Health check logged to database"

      - name: Log system healthy
        if: steps.site_check.outputs.site_healthy == 'true' && steps.db_check.outputs.db_healthy == 'true' && env.SUPABASE_HEALTH_LOGGER_URL != ''
        run: |
          curl -s -X POST "$SUPABASE_HEALTH_LOGGER_URL" \
            -H "x-autopilot-sign: $AUTOPILOT_SECRET" \
            -H "Content-Type: application/json" \
            -d "{\"source\":\"self-heal\",\"kind\":\"health-check\",\"status\":\"ok\",\"http_code\":${{ steps.site_check.outputs.site_status }},\"response_time_ms\":${{ steps.site_check.outputs.response_time }},\"detail\":\"All systems healthy\"}"

      - name: Slack notify - System healthy
        if: steps.site_check.outputs.site_healthy == 'true' && steps.db_check.outputs.db_healthy == 'true' && env.SLACK_WEBHOOK_URL != ''
        run: |
          # Only send healthy notifications every hour (12 checks * 5 min = 60 min)
          MINUTE=$(date +%M)
          if [[ "$MINUTE" == "00" ]] || [[ "$MINUTE" == "05" ]]; then
            curl -X POST -H 'Content-type: application/json' \
              --data "{\"text\":\"✅ *Self-Heal Check* — All systems healthy\n• Site: ${{ steps.site_check.outputs.site_status }} (${{ steps.site_check.outputs.response_time }}ms)\n• Health API: ${{ steps.site_check.outputs.health_status }}\n• Database: ${{ steps.db_check.outputs.db_status }} (${{ steps.db_check.outputs.db_response_time }}ms)\"}" \
              "$SLACK_WEBHOOK_URL"
          fi

      - name: Log system degraded
        if: (steps.site_check.outputs.site_healthy == 'false' || steps.db_check.outputs.db_healthy == 'false') && env.SUPABASE_HEALTH_LOGGER_URL != ''
        run: |
          curl -s -X POST "$SUPABASE_HEALTH_LOGGER_URL" \
            -H "x-autopilot-sign: $AUTOPILOT_SECRET" \
            -H "Content-Type: application/json" \
            -d "{\"source\":\"self-heal\",\"kind\":\"health-check\",\"status\":\"error\",\"http_code\":${{ steps.site_check.outputs.site_status }},\"response_time_ms\":${{ steps.site_check.outputs.response_time }},\"detail\":\"System degraded, auto-heal triggered\"}"

      - name: Slack notify - System degraded
        if: (steps.site_check.outputs.site_healthy == 'false' || steps.db_check.outputs.db_healthy == 'false') && env.SLACK_WEBHOOK_URL != ''
        run: |
          curl -X POST -H 'Content-type: application/json' \
            --data "{\"text\":\"⚠️ *Self-Heal Alert* — System degraded, initiating auto-heal\n• Site: ${{ steps.site_check.outputs.site_status }}\n• Health API: ${{ steps.site_check.outputs.health_status }}\n• Database: ${{ steps.db_check.outputs.db_status }}\n• Action: Triggering redeploy + DB repair\"}" \
            "$SLACK_WEBHOOK_URL"

      - name: Auto-heal - Trigger Netlify redeploy
        if: steps.site_check.outputs.site_healthy == 'false' || github.event.inputs.force_heal == 'true'
        id: redeploy
        run: |
          echo "==> Triggering Netlify redeploy..."
          RESPONSE=$(curl -s -X POST "$NETLIFY_BUILD_HOOK" -w "\n%{http_code}")
          HTTP_CODE=$(echo "$RESPONSE" | tail -n1)

          if [[ "$HTTP_CODE" == "200" ]] || [[ "$HTTP_CODE" == "201" ]]; then
            echo "redeploy_status=success" >> $GITHUB_OUTPUT
            echo "✅ Netlify redeploy triggered"
          else
            echo "redeploy_status=failed" >> $GITHUB_OUTPUT
            echo "⚠️  Netlify redeploy failed (HTTP $HTTP_CODE)"
          fi

      - name: Auto-heal - Run database repair
        if: steps.db_check.outputs.db_healthy == 'false' || github.event.inputs.force_heal == 'true'
        id: db_repair
        run: |
          echo "==> Running database repair..."

          # Try to apply migrations via worker
          RESPONSE=$(curl -s -X POST "$WORKER_ENDPOINT" \
            -H "Content-Type: application/json" \
            -H "x-autopilot-sign: $AUTOPILOT_SECRET" \
            -d '{"task":"health_check"}' \
            -w "\n%{http_code}" || echo -e "\n000")

          HTTP_CODE=$(echo "$RESPONSE" | tail -n1)

          if [[ "$HTTP_CODE" == "200" ]]; then
            echo "repair_status=success" >> $GITHUB_OUTPUT
            echo "✅ Database repair completed"
          else
            echo "repair_status=failed" >> $GITHUB_OUTPUT
            echo "⚠️  Database repair failed (HTTP $HTTP_CODE)"
          fi

      - name: Log healing actions
        if: steps.redeploy.outcome != 'skipped' || steps.db_repair.outcome != 'skipped'
        run: |
          NOTES="Auto-heal triggered: "
          [[ "${{ steps.redeploy.outcome }}" != "skipped" ]] && NOTES+="redeploy=${{ steps.redeploy.outputs.redeploy_status }} "
          [[ "${{ steps.db_repair.outcome }}" != "skipped" ]] && NOTES+="db_repair=${{ steps.db_repair.outputs.repair_status }}"

          psql "$SUPABASE_DB_URL" <<SQL || true
          INSERT INTO automation.deployment_log (platform, status, notes)
          VALUES ('netlify', 'triggered', '$NOTES');
          SQL

      - name: Wait for recovery
        if: steps.redeploy.outcome != 'skipped' || steps.db_repair.outcome != 'skipped'
        run: |
          echo "==> Waiting 90 seconds for recovery..."
          sleep 90

      - name: Verify recovery
        if: steps.redeploy.outcome != 'skipped' || steps.db_repair.outcome != 'skipped'
        id: verify
        run: |
          echo "==> Verifying system recovery..."

          # Check site again
          SITE_STATUS=$(curl -s -o /dev/null -w "%{http_code}" --max-time 10 "$SITE_URL" || echo "000")
          HEALTH_STATUS=$(curl -s -o /dev/null -w "%{http_code}" --max-time 10 "$HEALTH_ENDPOINT" || echo "000")

          echo "site_status_after=$SITE_STATUS" >> $GITHUB_OUTPUT
          echo "health_status_after=$HEALTH_STATUS" >> $GITHUB_OUTPUT

          if [[ "$SITE_STATUS" -lt 400 ]] && [[ "$HEALTH_STATUS" -lt 400 ]]; then
            echo "recovery_success=true" >> $GITHUB_OUTPUT
            echo "✅ Recovery successful: Site=$SITE_STATUS, Health=$HEALTH_STATUS"
          else
            echo "recovery_success=false" >> $GITHUB_OUTPUT
            echo "❌ Recovery failed: Site=$SITE_STATUS, Health=$HEALTH_STATUS"
          fi

      - name: Slack notify - Recovery success
        if: steps.verify.outputs.recovery_success == 'true' && env.SLACK_WEBHOOK_URL != ''
        run: |
          curl -X POST -H 'Content-type: application/json' \
            --data "{\"text\":\"✅ *Auto-Heal Successful* — System restored\n• Site: ${{ steps.verify.outputs.site_status_after }}\n• Health API: ${{ steps.verify.outputs.health_status_after }}\n• Actions: Redeploy + DB repair completed\n• Recovery time: ~90 seconds\"}" \
            "$SLACK_WEBHOOK_URL"

      - name: Slack notify - Recovery failed
        if: steps.verify.outputs.recovery_success == 'false' && env.SLACK_WEBHOOK_URL != ''
        run: |
          curl -X POST -H 'Content-type: application/json' \
            --data "{\"text\":\"❌ *Auto-Heal Failed* — Manual intervention required\n• Site: ${{ steps.verify.outputs.site_status_after }}\n• Health API: ${{ steps.verify.outputs.health_status_after }}\n• Actions taken: Redeploy + DB repair\n• Status: Still unhealthy after 90s\n• Logs: <${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}>\"}" \
            "$SLACK_WEBHOOK_URL"

      - name: Create escalation issue
        if: steps.verify.outputs.recovery_success == 'false'
        uses: actions/github-script@v7
        with:
          script: |
            const issue = await github.rest.issues.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              title: `🚨 Auto-Heal Failed - Manual Intervention Required`,
              body: `## Auto-Heal Failure Report
              
              **Time:** ${new Date().toISOString()}
              **Workflow run:** ${context.serverUrl}/${context.repo.owner}/${context.repo.repo}/actions/runs/${context.runId}
              
              ### System Status
              
              - **Site:** ${{ steps.verify.outputs.site_status_after }}
              - **Health API:** ${{ steps.verify.outputs.health_status_after }}
              - **Database:** ${{ steps.db_check.outputs.db_status }}
              
              ### Actions Taken
              
              1. ✅ Triggered Netlify redeploy
              2. ✅ Ran database repair
              3. ⏱️ Waited 90 seconds for recovery
              4. ❌ System still unhealthy
              
              ### Next Steps
              
              1. Check Netlify deployment logs
              2. Review Supabase function logs
              3. Verify database connectivity
              4. Check for infrastructure issues
              5. Review recent commits for breaking changes
              
              ### Health Check History
              
              View recent health checks:
              \`\`\`sql
              SELECT * FROM automation.health_log 
              ORDER BY checked_at DESC 
              LIMIT 10;
              \`\`\`
              
              ---
              *This issue was automatically created by Autopilot Phase 3 Self-Heal*`,
              labels: ['autopilot', 'self-heal-failed', 'urgent', 'incident']
            });

            console.log(`Created escalation issue #${issue.data.number}`);

      - name: Update health log with recovery result
        if: always() && steps.verify.outcome != 'skipped'
        run: |
          RECOVERY="${{ steps.verify.outputs.recovery_success }}"
          NOTES="Auto-heal attempted. Recovery: $RECOVERY"

          psql "$SUPABASE_DB_URL" <<SQL || true
          UPDATE automation.health_log
          SET notes = '$NOTES'
          WHERE id = (SELECT id FROM automation.health_log ORDER BY checked_at DESC LIMIT 1);
          SQL
