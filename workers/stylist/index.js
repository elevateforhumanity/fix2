/**
 * EFH AI Stylist Worker
 * Generates styled pages and assets for the EFH platform
 */

export default {
  async fetch(request, env, ctx) {
    const url = new URL(request.url);
    
    // CORS headers
    const corsHeaders = {
      'Access-Control-Allow-Origin': '*',
      'Access-Control-Allow-Methods': 'GET, POST, OPTIONS',
      'Access-Control-Allow-Headers': 'Content-Type, Authorization',
    };
    
    // Handle OPTIONS for CORS
    if (request.method === 'OPTIONS') {
      return new Response(null, { headers: corsHeaders });
    }
    
    // Health check
    if (url.pathname === '/health') {
      return json({
        status: 'healthy',
        service: 'efh-stylist',
        version: '1.0.0',
        timestamp: new Date().toISOString(),
        capabilities: [
          'web.pages.generate',
          'web.asset.generate',
          'web.theme.create'
        ]
      }, corsHeaders);
    }
    
    // Generate page
    if (url.pathname === '/site/home' || url.pathname === '/generate/page') {
      return handleGeneratePage(request, env, corsHeaders);
    }
    
    // Generate asset
    if (url.pathname === '/generate/asset') {
      return handleGenerateAsset(request, env, corsHeaders);
    }
    
    // Default response
    return json({
      service: 'efh-stylist',
      message: 'AI Stylist Worker',
      endpoints: [
        '/health',
        '/site/home',
        '/generate/page',
        '/generate/asset'
      ]
    }, corsHeaders);
  }
};

async function handleGeneratePage(request, env, corsHeaders) {
  try {
    const body = request.method === 'POST' ? await request.json() : {};
    const pageType = body.pageType || 'home';
    const description = body.description || 'Welcome to EFH';
    
    // Generate a simple styled page
    const html = `
<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>EFH - ${pageType}</title>
  <style>
    * { margin: 0; padding: 0; box-sizing: border-box; }
    body {
      font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif;
      background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
      min-height: 100vh;
      display: flex;
      align-items: center;
      justify-content: center;
      padding: 20px;
    }
    .container {
      background: white;
      border-radius: 20px;
      padding: 60px 40px;
      max-width: 800px;
      box-shadow: 0 20px 60px rgba(0,0,0,0.3);
      text-align: center;
    }
    h1 {
      color: #667eea;
      font-size: 3em;
      margin-bottom: 20px;
      font-weight: 700;
    }
    p {
      color: #666;
      font-size: 1.2em;
      line-height: 1.6;
      margin-bottom: 30px;
    }
    .cta {
      display: inline-block;
      background: #667eea;
      color: white;
      padding: 15px 40px;
      border-radius: 50px;
      text-decoration: none;
      font-weight: 600;
      transition: transform 0.2s, box-shadow 0.2s;
    }
    .cta:hover {
      transform: translateY(-2px);
      box-shadow: 0 10px 20px rgba(102, 126, 234, 0.4);
    }
    .badge {
      display: inline-block;
      background: #f0f0f0;
      padding: 8px 16px;
      border-radius: 20px;
      font-size: 0.9em;
      color: #666;
      margin-top: 20px;
    }
  </style>
</head>
<body>
  <div class="container">
    <h1>Elevate for Humanity</h1>
    <p>${description}</p>
    <a href="/get-started" class="cta">Get Started</a>
    <div class="badge">âœ¨ Generated by AI Stylist</div>
  </div>
</body>
</html>
    `.trim();
    
    return json({
      success: true,
      pageType,
      html,
      metadata: {
        generated: new Date().toISOString(),
        worker: 'efh-stylist',
        version: '1.0.0'
      }
    }, corsHeaders);
    
  } catch (error) {
    return json({
      success: false,
      error: error.message
    }, corsHeaders, 500);
  }
}

async function handleGenerateAsset(request, env, corsHeaders) {
  try {
    const body = await request.json();
    const assetType = body.assetType || 'logo';
    const style = body.style || 'modern';
    
    // Return SVG asset
    const svg = generateSVGAsset(assetType, style);
    
    return json({
      success: true,
      assetType,
      style,
      svg,
      metadata: {
        generated: new Date().toISOString(),
        worker: 'efh-stylist'
      }
    }, corsHeaders);
    
  } catch (error) {
    return json({
      success: false,
      error: error.message
    }, corsHeaders, 500);
  }
}

function generateSVGAsset(type, style) {
  // Simple SVG logo
  return `<svg width="200" height="200" xmlns="http://www.w3.org/2000/svg">
    <circle cx="100" cy="100" r="80" fill="#667eea"/>
    <text x="100" y="115" font-family="Arial" font-size="60" fill="white" text-anchor="middle" font-weight="bold">EFH</text>
  </svg>`;
}

function json(data, headers = {}, status = 200) {
  return new Response(JSON.stringify(data, null, 2), {
    status,
    headers: {
      'Content-Type': 'application/json',
      ...headers
    }
  });
}
