-- AI Generated Pages Schema
-- Stores pages, sections, and assets generated by the AI Stylist

-- Generated pages table
CREATE TABLE IF NOT EXISTS generated_pages (
  id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
  name TEXT NOT NULL,
  slug TEXT NOT NULL UNIQUE,
  page_type TEXT NOT NULL, -- home, about, programs, contact, etc.
  description TEXT,
  html TEXT NOT NULL,
  tailwind_classes JSONB,
  sections JSONB, -- Array of section names
  theme JSONB, -- Brand theme used
  assets JSONB, -- Generated images and icons { "IMG:programs": "url", "ICON:partners": "svg" }
  status TEXT NOT NULL DEFAULT 'draft', -- draft, published, archived
  version INTEGER NOT NULL DEFAULT 1,
  published_at TIMESTAMPTZ,
  created_by UUID REFERENCES auth.users(id),
  created_at TIMESTAMPTZ NOT NULL DEFAULT NOW(),
  updated_at TIMESTAMPTZ NOT NULL DEFAULT NOW()
);

-- Page versions for history and rollback
CREATE TABLE IF NOT EXISTS page_versions (
  id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
  page_id UUID NOT NULL REFERENCES generated_pages(id) ON DELETE CASCADE,
  version INTEGER NOT NULL,
  html TEXT NOT NULL,
  tailwind_classes JSONB,
  sections JSONB,
  theme JSONB,
  created_by UUID REFERENCES auth.users(id),
  created_at TIMESTAMPTZ NOT NULL DEFAULT NOW(),
  UNIQUE(page_id, version)
);

-- Generated sections (reusable components)
CREATE TABLE IF NOT EXISTS generated_sections (
  id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
  name TEXT NOT NULL,
  section_type TEXT NOT NULL, -- hero, features, testimonials, cta, etc.
  html TEXT NOT NULL,
  summary TEXT,
  tags TEXT[], -- For categorization
  usage_count INTEGER DEFAULT 0,
  created_by UUID REFERENCES auth.users(id),
  created_at TIMESTAMPTZ NOT NULL DEFAULT NOW(),
  updated_at TIMESTAMPTZ NOT NULL DEFAULT NOW()
);

-- Generated assets (social media, flyers, banners)
CREATE TABLE IF NOT EXISTS generated_assets (
  id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
  name TEXT NOT NULL,
  asset_type TEXT NOT NULL, -- social_post, story, flyer, banner, email_header
  html TEXT NOT NULL,
  dimensions TEXT, -- e.g., "1080x1080"
  copy_text TEXT,
  summary TEXT,
  file_url TEXT, -- If exported to image/PDF
  created_by UUID REFERENCES auth.users(id),
  created_at TIMESTAMPTZ NOT NULL DEFAULT NOW()
);

-- Page analytics
CREATE TABLE IF NOT EXISTS page_analytics (
  id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
  page_id UUID NOT NULL REFERENCES generated_pages(id) ON DELETE CASCADE,
  views INTEGER DEFAULT 0,
  unique_visitors INTEGER DEFAULT 0,
  avg_time_on_page INTEGER, -- seconds
  bounce_rate DECIMAL(5,2),
  conversion_rate DECIMAL(5,2),
  date DATE NOT NULL DEFAULT CURRENT_DATE,
  UNIQUE(page_id, date)
);

-- Indexes for performance
CREATE INDEX IF NOT EXISTS idx_generated_pages_slug ON generated_pages(slug);
CREATE INDEX IF NOT EXISTS idx_generated_pages_status ON generated_pages(status);
CREATE INDEX IF NOT EXISTS idx_generated_pages_page_type ON generated_pages(page_type);
CREATE INDEX IF NOT EXISTS idx_generated_pages_created_at ON generated_pages(created_at DESC);
CREATE INDEX IF NOT EXISTS idx_page_versions_page_id ON page_versions(page_id);
CREATE INDEX IF NOT EXISTS idx_generated_sections_section_type ON generated_sections(section_type);
CREATE INDEX IF NOT EXISTS idx_generated_sections_tags ON generated_sections USING GIN(tags);
CREATE INDEX IF NOT EXISTS idx_generated_assets_asset_type ON generated_assets(asset_type);
CREATE INDEX IF NOT EXISTS idx_page_analytics_page_id ON page_analytics(page_id);
CREATE INDEX IF NOT EXISTS idx_page_analytics_date ON page_analytics(date DESC);

-- RLS policies
ALTER TABLE generated_pages ENABLE ROW LEVEL SECURITY;
ALTER TABLE page_versions ENABLE ROW LEVEL SECURITY;
ALTER TABLE generated_sections ENABLE ROW LEVEL SECURITY;
ALTER TABLE generated_assets ENABLE ROW LEVEL SECURITY;
ALTER TABLE page_analytics ENABLE ROW LEVEL SECURITY;

-- Service role full access
CREATE POLICY "Service role full access to generated_pages" ON generated_pages FOR ALL USING (auth.role() = 'service_role');
CREATE POLICY "Service role full access to page_versions" ON page_versions FOR ALL USING (auth.role() = 'service_role');
CREATE POLICY "Service role full access to generated_sections" ON generated_sections FOR ALL USING (auth.role() = 'service_role');
CREATE POLICY "Service role full access to generated_assets" ON generated_assets FOR ALL USING (auth.role() = 'service_role');
CREATE POLICY "Service role full access to page_analytics" ON page_analytics FOR ALL USING (auth.role() = 'service_role');

-- Authenticated users can view published pages
CREATE POLICY "Users can view published pages" ON generated_pages FOR SELECT USING (status = 'published' OR auth.role() = 'authenticated');

-- Authenticated users can view sections and assets
CREATE POLICY "Users can view sections" ON generated_sections FOR SELECT USING (auth.role() = 'authenticated');
CREATE POLICY "Users can view assets" ON generated_assets FOR SELECT USING (auth.role() = 'authenticated');

-- Authenticated users can view analytics
CREATE POLICY "Users can view analytics" ON page_analytics FOR SELECT USING (auth.role() = 'authenticated');

-- Function to create page version on update
CREATE OR REPLACE FUNCTION create_page_version()
RETURNS TRIGGER AS $$
BEGIN
  -- Only create version if HTML changed
  IF OLD.html IS DISTINCT FROM NEW.html THEN
    INSERT INTO page_versions (page_id, version, html, tailwind_classes, sections, theme, created_by)
    VALUES (OLD.id, OLD.version, OLD.html, OLD.tailwind_classes, OLD.sections, OLD.theme, NEW.created_by);
    
    -- Increment version number
    NEW.version = OLD.version + 1;
  END IF;
  
  NEW.updated_at = NOW();
  RETURN NEW;
END;
$$ LANGUAGE plpgsql;

-- Trigger to auto-create versions
CREATE TRIGGER page_version_trigger
BEFORE UPDATE ON generated_pages
FOR EACH ROW
EXECUTE FUNCTION create_page_version();

-- Deployment logs
CREATE TABLE IF NOT EXISTS deployment_logs (
  id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
  page_id UUID NOT NULL REFERENCES generated_pages(id) ON DELETE CASCADE,
  slug TEXT NOT NULL,
  status TEXT NOT NULL, -- success, failed
  error_message TEXT,
  deployed_at TIMESTAMPTZ NOT NULL DEFAULT NOW()
);

CREATE INDEX IF NOT EXISTS idx_deployment_logs_page_id ON deployment_logs(page_id);
CREATE INDEX IF NOT EXISTS idx_deployment_logs_deployed_at ON deployment_logs(deployed_at DESC);

ALTER TABLE deployment_logs ENABLE ROW LEVEL SECURITY;
CREATE POLICY "Service role full access to deployment_logs" ON deployment_logs FOR ALL USING (auth.role() = 'service_role');
CREATE POLICY "Users can view deployment_logs" ON deployment_logs FOR SELECT USING (auth.role() = 'authenticated');

-- Function to increment section usage count
CREATE OR REPLACE FUNCTION increment_section_usage()
RETURNS TRIGGER AS $$
BEGIN
  UPDATE generated_sections
  SET usage_count = usage_count + 1
  WHERE id = ANY(
    SELECT jsonb_array_elements_text(NEW.sections)::UUID
    WHERE jsonb_typeof(NEW.sections) = 'array'
  );
  RETURN NEW;
END;
$$ LANGUAGE plpgsql;

-- Trigger to track section usage
CREATE TRIGGER section_usage_trigger
AFTER INSERT OR UPDATE ON generated_pages
FOR EACH ROW
WHEN (NEW.sections IS NOT NULL)
EXECUTE FUNCTION increment_section_usage();
