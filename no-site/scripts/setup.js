#!/usr/bin/env node

import 'dotenv/config';
import fs from 'fs';
import chalk from 'chalk';
import inquirer from 'inquirer';

console.clear();
console.log(chalk.bold.blue('\n🤖 EFH Autopilot Setup\n'));

async function setup() {
  // Check if .env exists
  if (fs.existsSync('.env')) {
    const { overwrite } = await inquirer.prompt([
      {
        type: 'confirm',
        name: 'overwrite',
        message: '.env file already exists. Overwrite?',
        default: false,
      },
    ]);
    
    if (!overwrite) {
      console.log(chalk.yellow('\nSetup cancelled. Your existing .env was not modified.\n'));
      return;
    }
  }
  
  console.log(chalk.cyan('Let\'s set up your environment variables.\n'));
  console.log(chalk.gray('You can skip optional fields by pressing Enter.\n'));
  
  const answers = await inquirer.prompt([
    {
      type: 'input',
      name: 'githubToken',
      message: 'GitHub Personal Access Token:',
      validate: (input) => input.length > 0 || 'GitHub token is required',
    },
    {
      type: 'input',
      name: 'githubOwner',
      message: 'GitHub Owner:',
      default: 'elevateforhumanity',
    },
    {
      type: 'input',
      name: 'githubRepo',
      message: 'GitHub Repository:',
      default: 'ecosystem2',
    },
    {
      type: 'input',
      name: 'supabaseUrl',
      message: 'Supabase URL (optional):',
    },
    {
      type: 'input',
      name: 'supabaseKey',
      message: 'Supabase Service Key (optional):',
    },
    {
      type: 'input',
      name: 'slackToken',
      message: 'Slack Bot Token (optional):',
    },
    {
      type: 'input',
      name: 'slackChannel',
      message: 'Slack Channel (optional):',
      default: 'hiring-alerts',
    },
    {
      type: 'confirm',
      name: 'dryRun',
      message: 'Enable DRY RUN mode (recommended for first time)?',
      default: true,
    },
  ]);
  
  const envContent = `# EFH Autopilot CLI - Environment Variables
# Generated by setup script

# ============================================
# GUARDRAILS
# ============================================
DRY_RUN=${answers.dryRun}
NODE_ENV=development

# ============================================
# GITHUB
# ============================================
GITHUB_TOKEN=${answers.githubToken}
GITHUB_OWNER=${answers.githubOwner}
GITHUB_REPO=${answers.githubRepo}

# ============================================
# SUPABASE (Optional)
# ============================================
${answers.supabaseUrl ? `SUPABASE_URL=${answers.supabaseUrl}` : '# SUPABASE_URL='}
${answers.supabaseKey ? `SUPABASE_SERVICE_KEY=${answers.supabaseKey}` : '# SUPABASE_SERVICE_KEY='}

# ============================================
# SLACK (Optional)
# ============================================
${answers.slackToken ? `SLACK_BOT_TOKEN=${answers.slackToken}` : '# SLACK_BOT_TOKEN='}
SLACK_HIRING_CHANNEL=${answers.slackChannel}

# ============================================
# OUTPUT SETTINGS
# ============================================
OUTPUT_DIR=.autopilot_out

# ============================================
# ORGANIZATION INFO
# ============================================
ORG_NAME=Elevate for Humanity
ORG_LOCATION=Indianapolis, IN
ORG_WEBSITE=https://elevateforhumanity.org
ORG_EMAIL=hiring@elevateforhumanity.org
`;
  
  fs.writeFileSync('.env', envContent, 'utf8');
  
  console.log(chalk.green('\n✅ .env file created successfully!\n'));
  
  console.log(chalk.cyan('Next steps:\n'));
  console.log(chalk.gray('  1. Review your .env file'));
  console.log(chalk.gray('  2. Run: npm start'));
  console.log(chalk.gray('  3. Try generating job posts\n'));
  
  if (answers.dryRun) {
    console.log(chalk.yellow('⚠️  DRY RUN mode is enabled'));
    console.log(chalk.gray('   No actual changes will be made to GitHub'));
    console.log(chalk.gray('   Set DRY_RUN=false in .env when ready\n'));
  }
}

setup().catch((error) => {
  console.error(chalk.red('\n❌ Setup failed:'), error.message);
  process.exit(1);
});
