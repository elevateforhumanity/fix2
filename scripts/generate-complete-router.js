#!/usr/bin/env node

/**
 * Autopilot Route Generator
 * Automatically generates complete router with all page components
 */

const fs = require('fs');
const path = require('path');

console.log('ðŸ¤– Autopilot: Generating Complete Router');
console.log('==========================================\n');

// Get all page components
const pagesDir = path.join(__dirname, '../src/pages');
const components = new Map();

function scanDirectory(dir) {
  const files = fs.readdirSync(dir);
  
  files.forEach(file => {
    const filePath = path.join(dir, file);
    const stat = fs.statSync(filePath);
    
    if (stat.isDirectory()) {
      scanDirectory(filePath);
    } else if (file.match(/\.(jsx|tsx)$/)) {
      const componentName = file.replace(/\.(jsx|tsx)$/, '');
      
      // Skip NotFound - it's the catch-all
      if (componentName === 'NotFound') return;
      
      // Convert component name to route
      let route = '/' + componentName
        .replace(/([A-Z])/g, '-$1')
        .toLowerCase()
        .replace(/^-/, '');
      
      // Special cases
      if (componentName === 'HomePage') route = '/';
      if (componentName === 'DonatePage') {
        // Keep both routes for DonatePage
        components.set('/donate.html', componentName);
        route = '/donate-page';
      }
      
      components.set(route, componentName);
    }
  });
}

// Scan for components
scanDirectory(pagesDir);

console.log(`âœ… Found ${components.size} page components\n`);

// Sort routes
const sortedRoutes = Array.from(components.entries()).sort((a, b) => {
  // Homepage first
  if (a[0] === '/') return -1;
  if (b[0] === '/') return 1;
  return a[0].localeCompare(b[0]);
});

// Generate imports
const imports = sortedRoutes.map(([route, component]) => {
  return `import ${component} from "./pages/${component}";`;
});

// Remove duplicates
const uniqueImports = [...new Set(imports)];

// Generate routes
const routes = sortedRoutes.map(([route, component]) => {
  return `      <Route path="${route}" element={<${component} />} />`;
});

// Generate router file
const routerContent = `import React from "react";
import { Routes, Route } from "react-router-dom";
${uniqueImports.join('\n')}
import NotFound from "./pages/NotFound";

/**
 * Complete Router Configuration
 * Auto-generated by Autopilot
 * ${new Date().toISOString()}
 * 
 * Total Routes: ${components.size}
 */
export default function AppRouter() {
  return (
    <Routes>
${routes.join('\n')}
      <Route path="*" element={<NotFound />} />
    </Routes>
  );
}
`;

// Write router file
const routerPath = path.join(__dirname, '../src/router.jsx');
const backupPath = path.join(__dirname, '../src/router.jsx.backup');

// Backup existing router
if (fs.existsSync(routerPath)) {
  fs.copyFileSync(routerPath, backupPath);
  console.log('âœ… Backed up existing router to router.jsx.backup\n');
}

// Write new router
fs.writeFileSync(routerPath, routerContent);
console.log('âœ… Generated new router with all components\n');

// Generate route list for reference
const routeList = sortedRoutes.map(([route, component]) => {
  return `  ${route.padEnd(40)} â†’ ${component}`;
}).join('\n');

const routeListContent = `# Complete Route List
# Auto-generated by Autopilot
# ${new Date().toISOString()}

Total Routes: ${components.size}

${routeList}
`;

fs.writeFileSync(path.join(__dirname, '../ROUTE_LIST.txt'), routeListContent);
console.log('âœ… Generated ROUTE_LIST.txt for reference\n');

// Summary
console.log('ðŸ“Š Summary:');
console.log(`   Routes Generated: ${components.size}`);
console.log(`   Imports: ${uniqueImports.length}`);
console.log(`   Backup: router.jsx.backup`);
console.log(`   Output: src/router.jsx`);
console.log(`   Reference: ROUTE_LIST.txt`);
console.log('\nâœ… Autopilot: Router generation complete!\n');

// Show sample routes
console.log('ðŸ“‹ Sample Routes (first 20):');
sortedRoutes.slice(0, 20).forEach(([route, component]) => {
  console.log(`   ${route.padEnd(40)} â†’ ${component}`);
});
console.log(`   ... and ${components.size - 20} more routes\n`);

console.log('ðŸš€ Next Steps:');
console.log('   1. Review generated router: src/router.jsx');
console.log('   2. Test routes: npm run dev');
console.log('   3. Update sitemap: npm run sitemap:generate');
console.log('   4. Commit changes: git add . && git commit -m "Add complete router"');
console.log('');
